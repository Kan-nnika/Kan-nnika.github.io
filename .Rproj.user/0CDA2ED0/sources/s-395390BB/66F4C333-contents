---
title: Random Variables
---

#### Outcomes

- Implement mathematical expressions in user defined functions
- Write vectorized functions
- Translate word problems and game rules into mathematics and code


#### Background

In this assignment we'll practice writing random variables using the game of Roulette.
We'll use them in the next assignment to analyze and understand the game.

A European roulette wheel has numbers 1-36 in red and black, and number 0 in green for a house win.
The dealer spins the board, and the the ball lands randomly on one of these 37 numbers.
Here's a brief [video introducing the rules of roulette](https://youtu.be/6nKBlWaRI8w).

#### Instructions

- Answer the following questions, and show all your R code.
- Upload your submission to Canvas in nicely formatted HTML generated from Rstudio.

In the code that follows, think of `x` as a random variable uniformly distributed on the integers 0 through 36, representing the possible values for a game of roulette.
Here's one way to produce a vector containing a sample of size `n` from `x`.

```{r}
n = 100
roulette_values = 0:36
x = sample(roulette_values, size = n, replace = TRUE)
```

# Questions

(4 points) general code quality across all questions.

## 1 - outside bet

(3 points)

The elements of our sample space are the roulette numbers: {0, 1, ..., 36}.
In statistics, a random variable is a function that maps an element of the sample space to a real number.
Let h(x) be a random variable representing the amount you win or lose for a bet on the high numbers defined as follows:

$$
h(x) = \begin{cases}
-1 &\mbox{if } x \leq 18 \\
1 & \mbox{if } 18 < x
\end{cases}
$$

Define a vectorized function `high` that accepts a sample vector `x` and implements `h(x)`.

```{r}
high = function(x)
{
  win = (x > 18)
  ifelse(win,1,-1)
}
```

Hint: Use `even(x)` below as a template.

```{r}
even = function(x)
{
    win = (x %% 2 == 0) & (x != 0)
    ifelse(win, 1, -1)
}
```


## 2

(2 points)

Define a vectorized function `low` that accepts a sample vector `x` and returns the amount you win or lose if you bet one unit money on the low numbers, from 1 to 18.
Hint: you lose if X = 0.

```{r}
low = function(x)
{
  win = (x <= 18) & (x >= 1)
  ifelse(win,1,-1)
}
```


## 3 - straight up

(3 points)

Define a vectorized function `straightup` that accepts `x`, a sample vector, and `d`, a digit between  0 and 36, and returns the amount you win or lose in roulette if you bet one unit money on the single value `d`.
Hint: The payout for a straight up bet is 35 to 1.

```{r}
straightup = function(x,d = 1)
{
  win = (x == d)
  ifelse(win,35,-1)
}
```


## 4 - something different

(5 points)

Pick another possible roulette bet that does not have a 1 to 1 payout, and implement an appropriately named vectorized function that accepts `x`, and returns the amount you win or lose in roulette if the ball lands in `x`.
Write it in mathematical notation below as f(x).

Let f(x) be a random variable representing the amount you win or lose for a bet on the first dozen numbers {1,..,12} defined as follows:

$$
f(x) = \begin{cases}
-1 &\mbox{if } x > 12 \\
2 & \mbox{if } 1 \leq x \leq 12
\end{cases}
$$

```{r}
firstdozen = function(x)
{
  win = (x >= 1) & (x <= 12)
  ifelse(win,2,-1)
}
```


## 5

(3 points)

Calculate the expected value of your winnings after a single play for each of the 4 betting strategies described above.
It should be negative, because the house always wins.

```{r}
single_play = data.frame(x)
bet = 50
digit = 2

# high bet
single_play$high = high(x)
high_win = nrow(single_play[single_play$high == 1,])

# low bet
single_play$low = low(x)
low_win = nrow(single_play[single_play$low == 1,])

# straight up bet
single_play$straightup = straightup(x,digit)
straightup_win = nrow(single_play[single_play$straightup == 35,])

# first dozen bet
single_play$firstdozen = firstdozen(x)
firstdozen_win = nrow(single_play[single_play$firstdozen == 2,])

single_play$Total_After_Each_Roll = rowSums(single_play[2:5])
total = data.frame(colSums(single_play,100))

# print summary
printSinglePlay = function(bet,payout,total,type,eachWin)
{
  cat("Bet",bet,"dollar(s) on",type, "with payout",payout,fill=TRUE)
  payoff = total[type,"colSums.single_play..100."]
  cat("Ball hits on the number(s):",eachWin,"times.","\nThen you",ifelse(payoff >=   0,"win","lose"),abs(payoff*bet),"dollar(s).\n\n",fill=FALSE)
}

printSinglePlay(bet,"1:1",total,"high",high_win)
printSinglePlay(bet,"1:1",total,"low",low_win)
printSinglePlay(bet,"35:1",total,"straightup",straightup_win)
printSinglePlay(bet,"2:1",total,"firstdozen",firstdozen_win)

payoff_total = total["Total_After_Each_Roll","colSums.single_play..100."]
cat("If you bet on all four,","you",ifelse(payoff_total >= 0,"win","lose"),abs(payoff_total*bet),"dollars.\n\n",fill=FALSE)

# data frames
single_play
total
```
<br><br><br><br>
