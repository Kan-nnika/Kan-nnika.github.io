} else
x[i] = 1/(max=min)
}
}
x3 = seq(from = -10, to = 10)
check(close_enough(
dunif(x3), dunif2(x3)
))
check(close_enough(
dunif(x3, min = -0.5, max = 2.5),
dunif2(x3, min = -0.5, max = 2.5)
))
median_mpg = median(mtcars$mpg)
median_mpg
mtcars2 = mtcars[median_mpg < mtcars$mpg & 4 == mtcars2$cyl, ]
mtcars2
check(nrow(mtcars2) == 11)
g = ggplot(data = mtcars) + geom_point(data = mtcars, aes(x = disp, y = mpg, color = gear))
print(g)
l = list(letters, LETTERS, 1:10, rnorm(5))
l_len = c(length(l[[1]]), length(l[[2]]), length(l[[3]]), length(l[[4]]))
l_len
l_len2 = lapply(l, length)
l_len2
check(close_enough(l_len, l_len2))
sprintf("Auto score:  %i / %i total points", .score$PASS, .score$PASS + .score$FAIL)
library(ggplot2)
# Just ignore this code :)
.score = new.env()
.score$PASS = 0
.score$FAIL = 0
#' Check that your answer is correct.
#'
#' @param expr expression that should evaluate to TRUE if the answer is correct.
check = function(expr)
{
status = tryCatch(expr, error = identity)
if(isTRUE(status)){
.score$PASS = .score$PASS + 1
cat("PASS")
} else {
.score$FAIL = .score$FAIL + 1
cat("FAIL")
}
}
#' Check that every element of x and y are "close enough".
#'
#' @param x numeric vector
#' @param y numeric vector
close_enough = function(x, y, epsilon = 1e-5)
{
max(abs(x - y)) < epsilon
}
x = seq(-2.0, 5.0, by=0.1 )
check(x[1] == -2)
check(length(x) == 71)
d1 = dunif(x, min = 0, max = 1)
d2 = dunif(x, min = -1, max = 2)
d3 = dunif(x, min = 0.5, max = 2.5)
d = data.frame(x,d1,d2,d3)
g = ggplot(data = d, mapping = aes(x)) + geom_line(aes(y = d1, colour= "Uniform(0,1)")) + geom_line(aes(y = d2, colour= "Uniform(-1,2)")) + geom_line(aes(y = d3, colour= "Uniform(0.5,2.5)")) + ylab("Probability Density Function (PDF)")  + ggtitle("Probability Density Function Evaluation for Uniform Distribution")
print(g)
dunif2 = function(x = seq(-2.0, 5.0, by=0.1 ), min = 0, max = 1)
{
for(i in seq_along(x))
{
if ( x[i] <= min | x[i] >= max)
{
x[i] = NaN
} else
x[i] = 1/(max=min)
}
}
x3 = seq(from = -10, to = 10)
check(close_enough(
dunif(x3), dunif2(x3)
))
check(close_enough(
dunif(x3, min = -0.5, max = 2.5),
dunif2(x3, min = -0.5, max = 2.5)
))
d = mtcars
median_mpg = median(d$mpg)
median_mpg
mtcars2 = d[median_mpg < d$mpg & 4 == d$cyl, ]
mtcars2
check(nrow(mtcars2) == 11)
g = ggplot(data = mtcars) + geom_point(data = mtcars, aes(x = disp, y = mpg, color = gear))
print(g)
l = list(letters, LETTERS, 1:10, rnorm(5))
l_len = c(length(l[[1]]), length(l[[2]]), length(l[[3]]), length(l[[4]]))
l_len
l_len2 = lapply(l, length)
l_len2
check(close_enough(l_len, l_len2))
sprintf("Auto score:  %i / %i total points", .score$PASS, .score$PASS + .score$FAIL)
library(ggplot2)
# Just ignore this code :)
.score = new.env()
.score$PASS = 0
.score$FAIL = 0
#' Check that your answer is correct.
#'
#' @param expr expression that should evaluate to TRUE if the answer is correct.
check = function(expr)
{
status = tryCatch(expr, error = identity)
if(isTRUE(status)){
.score$PASS = .score$PASS + 1
cat("PASS")
} else {
.score$FAIL = .score$FAIL + 1
cat("FAIL")
}
}
#' Check that every element of x and y are "close enough".
#'
#' @param x numeric vector
#' @param y numeric vector
close_enough = function(x, y, epsilon = 1e-5)
{
max(abs(x - y)) < epsilon
}
x = seq(-2.0, 5.0, by=0.1 )
check(x[1] == -2)
check(length(x) == 71)
d1 = dunif(x, min = 0, max = 1)
d2 = dunif(x, min = -1, max = 2)
d3 = dunif(x, min = 0.5, max = 2.5)
d = data.frame(x,d1,d2,d3)
g = ggplot(data = d, mapping = aes(x)) + geom_line(aes(y = d1, colour= "Uniform(0,1)")) + geom_line(aes(y = d2, colour= "Uniform(-1,2)")) + geom_line(aes(y = d3, colour= "Uniform(0.5,2.5)")) + ylab("Probability Density Function (PDF)")  + ggtitle("Probability Density Function Evaluation for Uniform Distribution")
print(g)
dunif2 = function(x = seq(-2.0, 5.0, by=0.1 ), min = 0, max = 1)
{
for(i in seq_along(x))
{
if ( x[i] <= min | x[i] >= max)
{
x[i] = NaN
} else
x[i] = 1/(max=min)
}
}
x3 = seq(from = -10, to = 10)
check(close_enough(
dunif(x3), dunif2(x3)
))
check(close_enough(
dunif(x3, min = -0.5, max = 2.5),
dunif2(x3, min = -0.5, max = 2.5)
))
d = mtcars
summary(d)
median_mpg = median(d$mpg)
median_mpg
mtcars2 = d[median_mpg < d$mpg & 4 == d$cyl, ]
mtcars2
check(nrow(mtcars2) == 11)
g = ggplot(data = mtcars) + geom_point(data = mtcars, aes(x = disp, y = mpg, color = gear))
print(g)
l = list(letters, LETTERS, 1:10, rnorm(5))
l_len = c(length(l[[1]]), length(l[[2]]), length(l[[3]]), length(l[[4]]))
l_len
l_len2 = lapply(l, length)
l_len2
check(close_enough(l_len, l_len2))
sprintf("Auto score:  %i / %i total points", .score$PASS, .score$PASS + .score$FAIL)
library(ggplot2)
# Just ignore this code :)
.score = new.env()
.score$PASS = 0
.score$FAIL = 0
#' Check that your answer is correct.
#'
#' @param expr expression that should evaluate to TRUE if the answer is correct.
check = function(expr)
{
status = tryCatch(expr, error = identity)
if(isTRUE(status)){
.score$PASS = .score$PASS + 1
cat("PASS")
} else {
.score$FAIL = .score$FAIL + 1
cat("FAIL")
}
}
#' Check that every element of x and y are "close enough".
#'
#' @param x numeric vector
#' @param y numeric vector
close_enough = function(x, y, epsilon = 1e-5)
{
max(abs(x - y)) < epsilon
}
x = seq(-2.0, 5.0, by=0.1 )
check(x[1] == -2)
check(length(x) == 71)
d1 = dunif(x, min = 0, max = 1)
d2 = dunif(x, min = -1, max = 2)
d3 = dunif(x, min = 0.5, max = 2.5)
d = data.frame(x,d1,d2,d3)
g = ggplot(data = d, mapping = aes(x)) + geom_line(aes(y = d1, colour= "Uniform(0,1)")) + geom_line(aes(y = d2, colour= "Uniform(-1,2)")) + geom_line(aes(y = d3, colour= "Uniform(0.5,2.5)")) + ylab("Probability Density Function (PDF)")  + ggtitle("Probability Density Function Evaluation for Uniform Distribution")
print(g)
dunif2 = function(x = seq(-2.0, 5.0, by=0.1 ), min = 0, max = 1)
{
for(i in seq_along(x))
{
if ( x[i] <= min | x[i] >= max)
{
x[i] = NaN
} else
x[i] = 1/(max=min)
}
}
x3 = seq(from = -10, to = 10)
check(close_enough(
dunif(x3), dunif2(x3)
))
check(close_enough(
dunif(x3, min = -0.5, max = 2.5),
dunif2(x3, min = -0.5, max = 2.5)
))
data(mtcars)
summary(mtcars)
median_mpg = median(mtcars$mpg)
median_mpg
mtcars2 = d[median_mpg < mtcars$mpg & 4 == mtcars$cyl, ]
mtcars2
check(nrow(mtcars2) == 11)
g = ggplot(mtcars, mapping = aes(x = disp, y = mpg)) +
geom_point(aes(color = as.factor(gear)))
print(g)
l = list(letters, LETTERS, 1:10, rnorm(5))
l_len = c(length(l[[1]]), length(l[[2]]), length(l[[3]]), length(l[[4]]))
l_len
l_len2 = lapply(l, length)
l_len2
check(close_enough(l_len, l_len2))
sprintf("Auto score:  %i / %i total points", .score$PASS, .score$PASS + .score$FAIL)
library(ggplot2)
# Just ignore this code :)
.score = new.env()
.score$PASS = 0
.score$FAIL = 0
#' Check that your answer is correct.
#'
#' @param expr expression that should evaluate to TRUE if the answer is correct.
check = function(expr)
{
status = tryCatch(expr, error = identity)
if(isTRUE(status)){
.score$PASS = .score$PASS + 1
cat("PASS")
} else {
.score$FAIL = .score$FAIL + 1
cat("FAIL")
}
}
#' Check that every element of x and y are "close enough".
#'
#' @param x numeric vector
#' @param y numeric vector
close_enough = function(x, y, epsilon = 1e-5)
{
max(abs(x - y)) < epsilon
}
x = seq(-2.0, 5.0, by=0.1 )
check(x[1] == -2)
check(length(x) == 71)
d1 = dunif(x, min = 0, max = 1)
d2 = dunif(x, min = -1, max = 2)
d3 = dunif(x, min = 0.5, max = 2.5)
d = data.frame(x,d1,d2,d3)
g = ggplot(data = d, mapping = aes(x)) + geom_line(aes(y = d1, colour= "Uniform(0,1)")) + geom_line(aes(y = d2, colour= "Uniform(-1,2)")) + geom_line(aes(y = d3, colour= "Uniform(0.5,2.5)")) + ylab("Probability Density Function (PDF)")  + ggtitle("Probability Density Function Evaluation for Uniform Distribution")
print(g)
dunif2 = function(x = seq(-2.0, 5.0, by=0.1 ), min = 0, max = 1)
{
for(i in seq_along(x))
{
if ( x[i] <= min | x[i] >= max)
{
x[i] = NaN
} else
x[i] = 1/(max=min)
}
}
x3 = seq(from = -10, to = 10)
check(close_enough(
dunif(x3), dunif2(x3)
))
check(close_enough(
dunif(x3, min = -0.5, max = 2.5),
dunif2(x3, min = -0.5, max = 2.5)
))
data(mtcars)
summary(mtcars)
median_mpg = median(mtcars$mpg)
mtcars2 = mtcars[median_mpg < mtcars$mpg & 4 == mtcars$cyl, ]
mtcars2
check(nrow(mtcars2) == 11)
g = ggplot(mtcars, mapping = aes(x = disp, y = mpg)) +
geom_point(aes(color = as.factor(gear)))
print(g)
l = list(letters, LETTERS, 1:10, rnorm(5))
l_len = c(length(l[[1]]), length(l[[2]]), length(l[[3]]), length(l[[4]]))
l_len
l_len2 = lapply(l, length)
l_len2
check(close_enough(l_len, l_len2))
sprintf("Auto score:  %i / %i total points", .score$PASS, .score$PASS + .score$FAIL)
library(ggplot2)
# Just ignore this code :)
.score = new.env()
.score$PASS = 0
.score$FAIL = 0
#' Check that your answer is correct.
#'
#' @param expr expression that should evaluate to TRUE if the answer is correct.
check = function(expr)
{
status = tryCatch(expr, error = identity)
if(isTRUE(status)){
.score$PASS = .score$PASS + 1
cat("PASS")
} else {
.score$FAIL = .score$FAIL + 1
cat("FAIL")
}
}
#' Check that every element of x and y are "close enough".
#'
#' @param x numeric vector
#' @param y numeric vector
close_enough = function(x, y, epsilon = 1e-5)
{
max(abs(x - y)) < epsilon
}
x = seq(-2.0, 5.0, by=0.1 )
check(x[1] == -2)
check(length(x) == 71)
d1 = dunif(x, min = 0, max = 1)
d2 = dunif(x, min = -1, max = 2)
d3 = dunif(x, min = 0.5, max = 2.5)
d = data.frame(x,d1,d2,d3)
g = ggplot(data = d, mapping = aes(x)) + geom_line(aes(y = d1, colour= "Uniform(0,1)")) + geom_line(aes(y = d2, colour= "Uniform(-1,2)")) + geom_line(aes(y = d3, colour= "Uniform(0.5,2.5)")) + ylab("Probability Density Function (PDF)")  + ggtitle("Probability Density Function Evaluation for Uniform Distribution")
print(g)
dunif2 = function(x = seq(-2.0, 5.0, by=0.1 ), min = 0, max = 1)
{
for(i in seq_along(x))
{
if ( x[i] <= min | x[i] >= max)
{
x[i] = NaN
} else
x[i] = 1/(max=min)
}
}
x3 = seq(from = -10, to = 10)
check(close_enough(
dunif(x3), dunif2(x3)
))
check(close_enough(
dunif(x3, min = -0.5, max = 2.5),
dunif2(x3, min = -0.5, max = 2.5)
))
data(mtcars)
mtcars2 = mtcars[median(mtcars$mpg) < mtcars$mpg & 4 == mtcars$cyl, ]
check(nrow(mtcars2) == 11)
g = ggplot(mtcars, mapping = aes(x = disp, y = mpg)) +
geom_point(aes(color = as.factor(gear)))
print(g)
l = list(letters, LETTERS, 1:10, rnorm(5))
l_len = c(length(l[[1]]), length(l[[2]]), length(l[[3]]), length(l[[4]]))
l_len
l_len2 = lapply(l, length)
l_len2
check(close_enough(l_len, l_len2))
sprintf("Auto score:  %i / %i total points", .score$PASS, .score$PASS + .score$FAIL)
library(ggplot2)
# Just ignore this code :)
.score = new.env()
.score$PASS = 0
.score$FAIL = 0
#' Check that your answer is correct.
#'
#' @param expr expression that should evaluate to TRUE if the answer is correct.
check = function(expr)
{
status = tryCatch(expr, error = identity)
if(isTRUE(status)){
.score$PASS = .score$PASS + 1
cat("PASS")
} else {
.score$FAIL = .score$FAIL + 1
cat("FAIL")
}
}
#' Check that every element of x and y are "close enough".
#'
#' @param x numeric vector
#' @param y numeric vector
close_enough = function(x, y, epsilon = 1e-5)
{
max(abs(x - y)) < epsilon
}
x = seq(-2.0, 5.0, by=0.1 )
check(x[1] == -2)
check(length(x) == 71)
d1 = dunif(x, min = 0, max = 1)
d2 = dunif(x, min = -1, max = 2)
d3 = dunif(x, min = 0.5, max = 2.5)
d = data.frame(x,d1,d2,d3)
g = ggplot(data = d, mapping = aes(x)) + geom_line(aes(y = d1, colour= "Uniform(0,1)")) + geom_line(aes(y = d2, colour= "Uniform(-1,2)")) + geom_line(aes(y = d3, colour= "Uniform(0.5,2.5)")) + ylab("Probability Density Function (PDF)")  + ggtitle("Probability Density Function Evaluation for Uniform Distribution")
print(g)
dunif2 = function(x = seq(-2.0, 5.0, by=0.1 ), min = 0, max = 1)
{
for(i in seq_along(x))
{
if ( x[i] <= min | x[i] >= max)
{
x[i] = NaN
} else
x[i] = 1/(max=min)
}
}
x3 = seq(from = -10, to = 10)
check(close_enough(
dunif(x3), dunif2(x3)
))
check(close_enough(
dunif(x3, min = -0.5, max = 2.5),
dunif2(x3, min = -0.5, max = 2.5)
))
data(mtcars)
mtcars2 = mtcars[median(mtcars$mpg) < mtcars$mpg & 4 == mtcars$cyl, ]
check(nrow(mtcars2) == 11)
g = ggplot(mtcars, mapping = aes(x = disp, y = mpg)) +
geom_point(aes(color = as.factor(gear)))
print(g)
l = list(letters, LETTERS, 1:10, rnorm(5))
l_len = c(length(l[[1]]), length(l[[2]]), length(l[[3]]), length(l[[4]]))
l_len
l_len2 = do.call(rbind, lapply(l, length))
check(close_enough(l_len, l_len2))
sprintf("Auto score:  %i / %i total points", .score$PASS, .score$PASS + .score$FAIL)
install.packages("dplyr")
library(ggplot2)
# Just ignore this code :)
.score = new.env()
.score$PASS = 0
.score$FAIL = 0
#' Check that your answer is correct.
#'
#' @param expr expression that should evaluate to TRUE if the answer is correct.
check = function(expr)
{
status = tryCatch(expr, error = identity)
if(isTRUE(status)){
.score$PASS = .score$PASS + 1
cat("PASS")
} else {
.score$FAIL = .score$FAIL + 1
cat("FAIL")
}
}
#' Check that every element of x and y are "close enough".
#'
#' @param x numeric vector
#' @param y numeric vector
close_enough = function(x, y, epsilon = 1e-5)
{
max(abs(x - y)) < epsilon
}
x = seq(-2.0, 5.0, by=0.1 )
check(x[1] == -2)
check(length(x) == 71)
d1 = dunif(x, min = 0, max = 1)
d2 = dunif(x, min = -1, max = 2)
d3 = dunif(x, min = 0.5, max = 2.5)
d = data.frame(x,d1,d2,d3)
g = ggplot(data = d, mapping = aes(x)) + geom_line(aes(y = d1, colour= "Uniform(0,1)")) + geom_line(aes(y = d2, colour= "Uniform(-1,2)")) + geom_line(aes(y = d3, colour= "Uniform(0.5,2.5)")) + ylab("Probability Density Function (PDF)")  + ggtitle("Probability Density Function Evaluation for Uniform Distribution")
print(g)
dunif2 = function(x = seq(-2.0, 5.0, by=0.1 ), min = 0, max = 1)
{
for(i in seq_along(x))
{
if ( x[i] <= min | x[i] >= max)
{
x[i] = NaN
} else
x[i] = 1/(max-min)
}
}
x3 = seq(from = -10, to = 10)
check(close_enough(
dunif(x3), dunif2(x3)
))
check(close_enough(
dunif(x3, min = -0.5, max = 2.5),
dunif2(x3, min = -0.5, max = 2.5)
))
data(mtcars)
mtcars2 = mtcars[median(mtcars$mpg) < mtcars$mpg & 4 == mtcars$cyl, ]
check(nrow(mtcars2) == 11)
g = ggplot(mtcars, mapping = aes(x = disp, y = mpg)) +
geom_point(aes(color = as.factor(gear)))
print(g)
l = list(letters, LETTERS, 1:10, rnorm(5))
l_len = c(length(l[[1]]), length(l[[2]]), length(l[[3]]), length(l[[4]]))
l_len2 = do.call(rbind, lapply(l, length))
check(close_enough(l_len, l_len2))
sprintf("Auto score:  %i / %i total points", .score$PASS, .score$PASS + .score$FAIL)
